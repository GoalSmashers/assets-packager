#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var commands = require('commander');

var packageConfig = fs.readFileSync(path.join(path.dirname(fs.realpathSync(process.argv[1])), '../package.json'));
var buildVersion = JSON.parse(packageConfig).version;

// Taken from MooTools 1.3
var escapeRegExp = function(s) {
  return s.replace(/([-.*+?^${}()|[\]\/\\])/g, '\\$1');
};

commands
  .version(buildVersion, '-v, --version')
  .usage('[options]')
  .option('-b, --cache-boosters', 'add MD5 hash to file names aka hard cache boosters')
  .option('-c, --config [path]', 'path to file with bundles definition (defaults to ./config/assets.yml)')
  .option('--css-asset-hosts [list]', 'assets host prefix URLs with in CSS bundles')
  .option('--css-bundle-to [path]', 'path to stylesheets root directory (relative to --root option)')
  .option('--css-safe-embed', 'create an additional version of packaged CSS without embedded images')
  .option('--css-source [path]', 'path to stylesheets root directory (relative to --root option)')
  .option('-g, --gzip', 'gzip packaged files')
  .option('-j, --concurrent [value]', 'number of concurrent tasks executed at once (defaults to number of logical CPUs)', parseInt)
  .option('--js-bundle-to [path]', 'path to JavaScript root directory (relative to --root option)')
  .option('--js-indent [value]', 'indentation level in spaces when used with --js-no-minify switch', parseInt)
  .option('--js-line-break-at [value]', 'number of characters per line in optimized JavaScript (defaults to no limit)', parseInt)
  .option('--js-no-minify', 'turn off JS minification')
  .option('--js-source [path]', 'path to JavaScript root directory (relative to --root option)')
  .option('-o, --only [list]', 'package only given assets group or groups if separated by comma(s)')
  .option('-r, --root [path]', 'root directory with assets directories (defaults to ./public)')
  .parse(process.argv);

var options = {
  cacheBoosters: commands.cacheBoosters,
  concurrent: commands.concurrent || require('os').cpus().length,
  config: path.join(process.cwd(), commands.config || './config/assets.yml'),
  css: {
    assetHosts: commands.cssAssetHosts,
    safeEmbed: commands.cssSafeEmbed,
    source: commands.cssSource || './stylesheets'
  },
  gzip: commands.gzip,
  js: {
    indent: commands.jsIndent,
    lineBreakAt: commands.jsLineBreakAt,
    minify: commands.jsMinify,
    source: commands.jsSource || './javascripts'
  },
  only: commands.only,
  root: path.join(process.cwd(), commands.root || 'public')
};

options.js.bundleTo = commands.jsBundleTo || path.join(options.js.source, '/bundled');
options.css.bundleTo = commands.cssBundleTo || path.join(options.css.source, '/bundled');

if (options.only) {
  options.only = {
    list: options.only.split(',').map(function(template) {
      return new RegExp(escapeRegExp(template).replace('\\*', '.*'));
    }),
    has: function(name) {
      for (var i = 0, c = this.list.length; i < c; i++) {
        if (this.list[i].test(name))
          return true;
      }
      return false;
    },
    hasCSS: /\.css[,]?/.test(options.only),
    hasJS: /\.js[,]?/.test(options.only)
  };
}

if (!fs.existsSync(options.config)) {
  process.stderr.write('Configuration file "' + options.config + '" is missing!\n');
  return 0;
}

if (!fs.existsSync(options.root)) {
  process.stderr.write('Root path "' + options.root + '" could not be found!\n');
  return 0;
}

var Packager = require('../index');
new Packager(options).process();
