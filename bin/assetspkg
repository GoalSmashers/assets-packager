#!/usr/bin/env node

var fs = require('fs'),
  path = require('path'),
  sys = require('sys'),
  uglify = require('uglify-js'),
  Seq = require('seq'),
  exec = require('child_process').exec,
  cleanCSS = require('clean-css'),
  EnhanceCSS = require('enhance-css'),
  AssetsExpander = require('assets-expander');

// Init optimist arguments parsing
var options = {
  root: 'public',
  config: 'config/assets.yml',
  gzip: false
};

var argv = require('optimist').argv;

options.root = path.join(process.cwd(), argv.r || argv.root || options.root);
options.config = path.join(process.cwd(), argv.c || argv.config || options.config);
options.gzip = argv.g || argv.gzip || options.gzip;

// Usage
if (argv.h || argv.help) {
  sys.puts("usage: assetspkg [options]\n");
  sys.puts("options:");
  sys.puts("  -c, --config\t\tPath to file with assets definitions (defaults to ./config/assets.yml)");
  sys.puts("  -r, --root\t\tRoot directory, relative to all will be made (defaults to ./public)");
  sys.puts("  -g, --gzip\t\Gzip packaged files (defaults to false).");
  sys.puts("  -h, --help\t\tYou are staring at it!");
  sys.puts("  -v, --version\t\tAssets Packager version.");
  process.exit(0);
}

// Version
if (argv.v || argv.version) {
  var packageConfig = fs.readFileSync(path.join(path.dirname(process.argv[1]), '../package.json'));
  sys.puts(JSON.parse(packageConfig).version);
  process.exit(0);
}

// Invalid config
if (!path.existsSync(options.config)) {
  process.stderr.write('Configuration file "' + options.config + '" is missing!\n');
  process.exit(0);
}

// Invalid root path
if (!path.existsSync(options.root)) {
  process.stderr.write('Root path "' + options.root + '" could not be found!\n');
  process.exit(0);
}

// Configuration seems to be fine. Proceed with packaging!
var expander = new AssetsExpander(options.config, { root: options.root }),
  extensions = { stylesheets: 'css', javascripts: 'js' };

// Packaging action
Seq.ap(expander.allTypes()).
  seqEach(function(type) {
    // First compile Less to CSS
    if (type == 'stylesheets') {
      compileLessToCss(type, this);
    } else {
      this(null);
    }
  }).
  seqEach(function(type) {
    // Then process all files
    var self = this;
    sys.puts("Processing type '" + type + "'...");

    Seq.ap(expander.groupsFor(type)).
      parEach(4, function(groupName) {
        processGroup(type, groupName, this);
      }).
      seq('type', self, null)
  });

// HELPER METHODS

// Joins files from 'list' into one
var joinFiles = function(list) {
  var content = '';
  list.forEach(function(fileName) {
    content += fs.readFileSync(fileName, 'utf-8');
  })
  return content;
};

// Compiles LESS files to CSS
var compileLessToCss = function(type, callback) {
  var filesList = expander.processList(type + '/**/*', { type: 'less', root: options.root });
  sys.puts("Compiling " + filesList.length + " Less file(s) to CSS...");
  
  Seq.ap(filesList).
    parEach(function(pathToLessFile) {
      sys.puts("  Compiling '" + path.basename(pathToLessFile) + "'...");
      exec('lessc ' + pathToLessFile + ' > ' + pathToLessFile.replace('.less', '.css'), this);
    }).
    seq('less', function() {
      callback.call();
    });
};

// Processes group of files, outputting bundled & gzipped files
var processGroup = function(type, group, callback) {
  var filesList = expander.processGroup(type, group, { type: extensions[type] }),
    groupPath = path.join(options.root, type, 'bundled', group) + '.' + extensions[type],
    groupDir = path.dirname(groupPath);
  
  if (type == 'stylesheets') {
    Seq().
      seq(function() {
        exec('mkdir -p ' + groupDir, this);
      }).
      seq(function() {
        var data = joinFiles(filesList);
        var cleaned = cleanCSS.process(data);
        new EnhanceCSS({ rootPath: options.root, pregzip: true, noEmbedVersion: true }).process(cleaned, this);
      }).
      par(function(data) {
        fs.writeFile(groupPath, data.embedded.plain, 'utf-8', this);
      }).
      par(function(data) {
        if (!options.gzip) return this(null);
        
        fs.writeFile(groupPath + '.gz', data.embedded.compressed, 'utf-8', this);
      }).
      par(function(data) {
        fs.writeFile(groupPath.replace('.' + extensions[type], '-noembed.' + extensions[type]), data.notEmbedded.plain, 'utf-8', this);
      }).
      par(function(data) {
        if (!options.gzip) return this(null);

        fs.writeFile(groupPath.replace('.' + extensions[type], '-noembed.' + extensions[type]) + '.gz', data.notEmbedded.compressed, 'utf-8', this);
      }).
      seq(function() {
        sys.puts("  Processed " + type + " group '" + group + "' - squeezing " + filesList.length + " file(s)");
        this(null);
      }).
      seq('css', callback);
  } else {
    Seq().
      seq(function() {
        exec('mkdir -p ' + groupDir, this);
      }).
      seq(function() {
        var content = joinFiles(filesList);
        var ast = uglify.parser.parse(content);
        if (!/Cufon\.registerFont/.test(content)) {
          // We skip mangling for Cufon as it doesn't like it.
          ast = uglify.uglify.ast_mangle(ast);
          ast = uglify.uglify.ast_squeeze(ast);
        }
        var data = uglify.uglify.gen_code(ast, { beautify: true, indent_level: 0 });
        
        fs.writeFile(groupPath, data, 'utf-8', this);
      }).
      seq(function() {
        if (!options.gzip) return this(null);
        
        exec('gzip -c6 ' + groupPath + ' > ' + groupPath + '.gz', this);
      }).
      seq(function() {
        sys.puts("  Processed " + type + " group '" + group + "' - squeezing " + filesList.length + " file(s)");
        this(null);
      }).
      seq('js', callback)
  }
};